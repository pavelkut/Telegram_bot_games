{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "token = '1481065029:AAHHoMu5CyMQSMfjF8zS6izL943OMGTin38'\n",
    "import telebot\n",
    "from telebot import types\n",
    "\n",
    "bot = telebot.TeleBot(token)\n",
    "user_dict = {}\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time\n",
    "\n",
    "class LIST:\n",
    "    def __init__(self, msg):\n",
    "        self.msg = msg\n",
    "        self.del_pr = None\n",
    "        \n",
    "df = pd.read_csv('hangman.csv', index_col=0)\n",
    "df_words = pd.read_csv('words.csv', index_col=0)\n",
    "words_records = pd.read_csv('words_records.csv', index_col=0)\n",
    "short_words = pd.read_csv('short_words.csv', header=None)\n",
    "medium_words = pd.read_csv('mid_words.csv', header=None)\n",
    "long_words = pd.read_csv('long_words.csv', header=None)\n",
    "nouns = pd.read_csv('nouns.csv', header=None)\n",
    "cities = pd.read_csv('cities.csv', delimiter=';')\n",
    "df_cities = pd.read_csv('cities_info.csv', index_col=0)\n",
    "\n",
    "@bot.message_handler(commands=['start'])\n",
    "\n",
    "def greetings(message):\n",
    "    username = message.from_user.first_name + '!'\n",
    "    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "    bt1 = types.KeyboardButton('Hi, Artёm!')\n",
    "    markup.add(bt1)\n",
    "    msg = bot.send_message(message.chat.id, 'Hi, ' + username,\n",
    "                          reply_markup=markup)\n",
    "    bot.register_next_step_handler(msg, rules)\n",
    "    \n",
    "def rules(message):\n",
    "    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "    bt1 = types.KeyboardButton('Yes, please')\n",
    "    bt2 = types.KeyboardButton('No, thank you')\n",
    "    markup.add(bt1, bt2)\n",
    "    msg = bot.send_message(message.chat.id, 'Do you want to know the rules?',\n",
    "                          reply_markup=markup)\n",
    "    bot.register_next_step_handler(msg, choose_game)\n",
    "    \n",
    "def choose_game(message):\n",
    "    if message.text == 'Yes, please':\n",
    "        bot.send_message(message.chat.id, 'We can play three different games: hangerman, cities and scrabble.')\n",
    "        bot.send_message(message.chat.id, 'Hangerman: I choose random english noun, and you need to guess it by one letter at a time. Be careful, you can make only 6 mistakes!')\n",
    "        bot.send_message(message.chat.id, 'Cities: I name random city and you need to name a city, starting with the last letter of mine')\n",
    "        bot.send_message(message.chat.id, 'Scrabble: I give you a random word. You need to compose as much nouns as possible, using only the letters of my word.')\n",
    "        \n",
    "    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)\n",
    "    bt1 = types.KeyboardButton('Hangerman')\n",
    "    bt2 = types.KeyboardButton('Cities')\n",
    "    bt3 = types.KeyboardButton('Scrabble')\n",
    "    markup.add(bt1, bt2, bt3)\n",
    "    msg = bot.send_message(message.chat.id, 'What do you want to play?',\n",
    "                           reply_markup=markup)\n",
    "    bot.register_next_step_handler(msg, switch_to_game)\n",
    "    \n",
    "def switch_to_game(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)\n",
    "        if message.text == 'Hangerman':\n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton('Short')\n",
    "            bt2 = types.KeyboardButton('Medium')\n",
    "            bt3 = types.KeyboardButton('Long')\n",
    "            bt4 = types.KeyboardButton('Cancel')\n",
    "            markup.add(bt1, bt2, bt3, bt4)\n",
    "            msg = bot.send_message(chat_id, f'Choose word length.', reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, hangman_give_word)\n",
    "        elif message.text == 'Scrabble':\n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton(\"Yes!\")\n",
    "            markup.add(bt1)\n",
    "            msg = bot.send_message(chat_id, \"Let's play scrabble!\", reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, words_give_word)\n",
    "        elif message.text == 'Cities':\n",
    "            bot.send_message(chat_id, 'Great! If you want to finish the game, just write \"Stop\".')\n",
    "            n = np.random.choice(cities.index)\n",
    "            city, country, pop = cities.city[n], cities.country[n], cities.population[n]\n",
    "            df_cities.loc[chat_id] = [city[-1], [city], 0]\n",
    "            msg = bot.send_message(chat_id, 'My city is ' + city + '\\nCountry: ' + country + '\\nPopulation: ' + str(int(pop)))\n",
    "            bot.register_next_step_handler(msg, cities_game)\n",
    "        else:\n",
    "            bot.send_message(chat_id, \"I don't get it...\", reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, switch_to_game)\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "        \n",
    "def hangman_give_word(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)  \n",
    "        \n",
    "        if message.text == 'Short':\n",
    "            word = np.random.choice(short_words[0])\n",
    "        elif message.text == 'Medium':\n",
    "            word = np.random.choice(medium_words[0])\n",
    "        elif message.text == 'Long':\n",
    "            word = np.random.choice(long_words[0])\n",
    "        elif message.text == 'Cancel':\n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton('Yes!')\n",
    "            markup.add(bt1)\n",
    "            msg = bot.send_message(chat_id, \"Let's choose another game!\", reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, choose_game)\n",
    "            \n",
    "        lifes = 6\n",
    "        rec_let = list()\n",
    "        \n",
    "        df.loc[chat_id] = [word, lifes, rec_let, 0]\n",
    "        \n",
    "        bot.send_message(chat_id, 'Great! Try to guess a letter.')\n",
    "        bot.send_message(chat_id, 'To end the game, write \"stop\".')\n",
    "        bot.send_message(chat_id, 'Lifes: 6')\n",
    "        msg = bot.send_message(chat_id, '_ ' * len(word))\n",
    "        bot.register_next_step_handler(msg, hangman_game)\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "            \n",
    "def hangman_game(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)\n",
    "        \n",
    "        user_input = message.text.lower()\n",
    "        word = df['word'][chat_id]\n",
    "        \n",
    "        if user_input == 'stop':\n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton('Yes!')\n",
    "            markup.add(bt1)\n",
    "            bot.send_message(chat_id, 'It was \"' + word + '\"!')\n",
    "            msg = bot.send_message(chat_id, 'Try again?', reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, choose_game)\n",
    "        \n",
    "        else:\n",
    "            letters_recognized = df['nrec_let'][chat_id]\n",
    "            check_repeat = 1\n",
    "            for i in range(len(word)):\n",
    "                if word[i] == user_input:\n",
    "                    if i not in df['rec_let'][chat_id]:\n",
    "                        df['rec_let'][chat_id].append(i)\n",
    "                    else:\n",
    "                        check_repeat = 0\n",
    "\n",
    "            if len(df['rec_let'][chat_id]) == letters_recognized:\n",
    "                if check_repeat == 1:\n",
    "                    df['lifes'][chat_id] = df['lifes'][chat_id] - 1\n",
    "                    lifes = df['lifes'][chat_id]\n",
    "                    if lifes > 0:\n",
    "                        bot.send_message(chat_id, 'Wrong! ' + str(lifes) + ' lifes left.')\n",
    "                        output = ''\n",
    "                        for i in range(len(word)):\n",
    "                            if i in df['rec_let'][chat_id]:\n",
    "                                output += word[i] + ' '\n",
    "                            else:\n",
    "                                output += '_ ' \n",
    "                        msg = bot.send_message(chat_id, output)\n",
    "                        bot.register_next_step_handler(msg, hangman_game)\n",
    "                    else:\n",
    "                        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "                        bt1 = types.KeyboardButton('Yes!')\n",
    "                        markup.add(bt1)\n",
    "                        bot.send_message(chat_id, 'You lost! :(\\nIt was \"' + word + '\"')\n",
    "                        msg = bot.send_message(chat_id, 'Try again?', reply_markup=markup)\n",
    "                        bot.register_next_step_handler(msg, choose_game)\n",
    "                        \n",
    "                else:\n",
    "                    msg = bot.send_message(chat_id, 'This letter is already opened! Try another one.')\n",
    "                    bot.register_next_step_handler(msg, hangman_game)\n",
    "\n",
    "            else:\n",
    "                if len(df['rec_let'][chat_id]) == len(word):\n",
    "                    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "                    bt1 = types.KeyboardButton('Yes!')\n",
    "                    markup.add(bt1)\n",
    "                    bot.send_message(chat_id, 'You won!\\nIt was \"' + word + '\".')\n",
    "                    msg = bot.send_message(chat_id, 'Try again?', reply_markup=markup)\n",
    "                    bot.register_next_step_handler(msg, choose_game)\n",
    "                else:\n",
    "                    lifes = df['lifes'][chat_id]\n",
    "                    df['nrec_let'][chat_id] = len(df['rec_let'][chat_id])\n",
    "                    bot.send_message(chat_id, 'Great! ' + str(lifes) + ' lifes left.')\n",
    "                    output = ''\n",
    "                    for i in range(len(word)):\n",
    "                        if i in df['rec_let'][chat_id]:\n",
    "                            output += word[i] + ' '\n",
    "                        else:\n",
    "                            output += '_ ' \n",
    "                    msg = bot.send_message(chat_id, output)\n",
    "                    bot.register_next_step_handler(msg, hangman_game)         \n",
    "\n",
    "            df.to_csv('hangman.csv')\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "    \n",
    "def words_give_word(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text) \n",
    "        \n",
    "        word = np.random.choice(long_words[0])\n",
    "        points = 0\n",
    "        time_user = time.time()\n",
    "        words = list()\n",
    "        \n",
    "        df_words.loc[chat_id] = [word, points, time_user, words]\n",
    "        df_words.to_csv('words.csv')\n",
    "        \n",
    "        bot.send_message(chat_id, 'You got the word \"' + word + '\".')\n",
    "        msg = bot.send_message(chat_id, 'Try to score maximum points in 1.5 minutes!')\n",
    "        bot.register_next_step_handler(msg, words_game)\n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "        \n",
    "def words_game(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)\n",
    "        \n",
    "        user_word = message.text.lower()\n",
    "        word = df_words['word'][chat_id]\n",
    "        user_time = df_words['time'][chat_id]\n",
    "        stop = 0\n",
    "        \n",
    "        if time.time() - user_time <= 90:\n",
    "            if user_word == word:\n",
    "                msg = bot.send_message(chat_id, \"Hey, it's cheating!\")\n",
    "                stop = 1\n",
    "                bot.register_next_step_handler(msg, words_game)\n",
    "            elif user_word in df_words['words'][chat_id]:\n",
    "                msg = bot.send_message(chat_id, 'You have already named it!')\n",
    "                stop = 1\n",
    "                bot.register_next_step_handler(msg, words_game)\n",
    "            else:\n",
    "                for i in user_word:\n",
    "                    if i not in list(word):\n",
    "                        msg = bot.send_message(chat_id, 'There is no letter \"' + i + '\" in the word \"' + word + '\"!')\n",
    "                        bot.register_next_step_handler(msg, words_game)\n",
    "                        stop = 1\n",
    "                        break\n",
    "                    elif user_word.count(i) > word.count(i):\n",
    "                        msg = bot.send_message(chat_id, 'There is not enough \"' + i + '\" in the word \"' + word + '\"!')\n",
    "                        bot.register_next_step_handler(msg, words_game)\n",
    "                        stop = 1\n",
    "                        break\n",
    "        else:\n",
    "            bot.send_message(chat_id, \"Time's up!\\nYou scored \" + str(df_words['points'][chat_id]) + ' points!')\n",
    "            stop = 1\n",
    "            name = message.from_user.first_name\n",
    "            lastname = message.from_user.last_name\n",
    "            points = df_words['points'][chat_id]\n",
    "            \n",
    "            try:\n",
    "                words_records.loc[chat_id]\n",
    "            except KeyError:\n",
    "                words_records.loc[chat_id] = [name, lastname, 0, points]\n",
    "                \n",
    "            words_records['last_points'][chat_id] = points\n",
    "            if words_records['last_points'][chat_id] > words_records['max_points'][chat_id]:\n",
    "                words_records['max_points'][chat_id] = points\n",
    "                bot.send_message(chat_id, 'New record!')\n",
    "            words_records.to_csv('words_records.csv')\n",
    "            \n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton('Yes!')\n",
    "            bt2 = types.KeyboardButton('No...')\n",
    "            markup.add(bt1, bt2)\n",
    "            msg = bot.send_message(chat_id, 'Do you want to see records?', reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, records_words)\n",
    "        \n",
    "        if stop == 0:\n",
    "            if nouns[nouns[0] == user_word].empty:\n",
    "                msg = bot.send_message(chat_id, 'This word does not fit!')\n",
    "                stop = 1\n",
    "                bot.register_next_step_handler(msg, words_game)\n",
    "        \n",
    "        if stop == 0:\n",
    "            df_words['points'][chat_id] += len(user_word)\n",
    "            df_words['words'][chat_id].append(user_word)\n",
    "            df_words.to_csv('words.csv')\n",
    "            bot.send_message(chat_id, 'Great! You have ' + str(df_words['points'][chat_id]) + ' points!')\n",
    "            msg = bot.send_message(chat_id, 'Your word: ' + word)\n",
    "            bot.register_next_step_handler(msg, words_game)\n",
    "                \n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "        \n",
    "def records_words(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)\n",
    "        \n",
    "        if message.text == 'Yes!':\n",
    "            table = words_records.sort_values(by='max_points', ascending=False).head(5)\n",
    "            output = ''\n",
    "            for i in table.index:\n",
    "                row = table.loc[i]\n",
    "                output += (row.first_name + ': ' + str(row.max_points) + '\\n')\n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton('Next')\n",
    "            markup.add(bt1)\n",
    "            msg = bot.send_message(chat_id, output, reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, choose_game)\n",
    "        else:\n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton('Yes!')\n",
    "            markup.add(bt1)\n",
    "            msg = bot.send_message(chat_id, 'Try again?', reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, choose_game)\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "\n",
    "def cities_game(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)\n",
    "        \n",
    "        user_input = message.text.title()\n",
    "        \n",
    "        if user_input == 'Stop':\n",
    "            bot.send_message(chat_id, 'Good game! You got ' + str(df_cities.n_cities[chat_id]) + ' points!')\n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton('Yes!')\n",
    "            markup.add(bt1)\n",
    "            msg = bot.send_message(chat_id, 'Wanna play again?', reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, choose_game)\n",
    "        else:\n",
    "            if user_input[0].lower() != df_cities.last_letter[chat_id]:\n",
    "                msg = bot.send_message(chat_id, 'Name of the city must start with \"' + df_cities.last_letter[chat_id] + '\"!')\n",
    "                bot.register_next_step_handler(msg, cities_game) \n",
    "\n",
    "            elif user_input in df_cities.cities_named[chat_id]:\n",
    "                msg = bot.send_message(chat_id, 'This city has been already named!')\n",
    "                bot.register_next_step_handler(msg, cities_game)\n",
    "\n",
    "            elif cities[cities.city == user_input].empty:\n",
    "                msg = bot.send_message(chat_id, 'Sorry, I do not know this city...')\n",
    "                bot.register_next_step_handler(msg, cities_game)\n",
    "\n",
    "            else:\n",
    "                df_cities.n_cities[chat_id] += 1\n",
    "                df_cities.cities_named[chat_id].append(user_input)\n",
    "                df_cities.to_csv('cities_info.csv')\n",
    "\n",
    "                last_letter = user_input[-1]\n",
    "                info = cities[cities.city == user_input].iloc[0]\n",
    "                city, country, pop = info.city, info.country, info.population\n",
    "                bot.send_message(chat_id, 'Your city: ' + city + '\\nCountry: ' + country + '\\nPopulation: ' + str(int(pop)))\n",
    "\n",
    "                temp = cities[cities.first_letter == last_letter]\n",
    "                for i in df_cities.cities_named[chat_id]:\n",
    "                    temp = temp[temp.city != i]\n",
    "                if temp.empty:\n",
    "                    bot.send_message(chat_id, 'Wow... I do not know any other cities, starting with \"' +\n",
    "                                           last_letter + '\"!')\n",
    "                    bot.send_message(chat_id, 'Good game! You got ' + df_cities.n_cities[chat_id] + ' points!')\n",
    "                    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "                    bt1 = types.KeyboardButton('Yes!')\n",
    "                    markup.add(bt1)\n",
    "                    msg = bot.send_message(chat_id, 'You won! Wanna play again?', reply_markup=markup)\n",
    "                    bot.register_next_step_handler(msg, choose_game)\n",
    "                else:\n",
    "                    n = np.random.choice(temp[temp.first_letter == last_letter].index)\n",
    "                    city, country, pop = temp.city[n], temp.country[n], temp.population[n]\n",
    "                    df_cities.cities_named[chat_id].append(city)\n",
    "                    df_cities.last_letter[chat_id] = city[-1]\n",
    "                    msg = bot.send_message(chat_id, 'Great! My city is ' + city + '\\nCountry: ' + country + '\\nPopulation: ' + str(int(pop)))\n",
    "                    bot.register_next_step_handler(msg, cities_game)\n",
    "\n",
    "            df_cities.to_csv('cities_info.csv')\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(str(e))    \n",
    "            \n",
    "bot.polling(none_stop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>last_letter</th>\n",
       "      <th>cities_named</th>\n",
       "      <th>n_cities</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>363737249</th>\n",
       "      <td>g</td>\n",
       "      <td>['Yingzhong', 'Gyda']</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          last_letter           cities_named  n_cities\n",
       "363737249           g  ['Yingzhong', 'Gyda']         1"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cities"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "token = '1324824424:AAHiacklvMgYvfaW4LPP9-JQOUea3MLKTPg'\n",
    "import telebot\n",
    "from telebot import types\n",
    "\n",
    "bot = telebot.TeleBot(token)\n",
    "user_dict = {}\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "class LIST:\n",
    "    def __init__(self, msg):\n",
    "        self.msg = msg\n",
    "        self.del_pr = None\n",
    "df = pd.read_csv('test.csv', index_col=0)\n",
    "#df = pd.DataFrame({'word': ['text'], 'lifes': [6], 'rec_let': [list()]})\n",
    "\n",
    "@bot.message_handler(commands=['start'])\n",
    "\n",
    "def greetings(message):\n",
    "    username = message.from_user.first_name + '!'\n",
    "    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)\n",
    "    bt1 = types.KeyboardButton('Привет, Артём!')\n",
    "    markup.add(bt1)\n",
    "    msg = bot.send_message(message.chat.id, 'Привет, ' + username)\n",
    "    bot.register_next_step_handler(msg, choose_game)\n",
    "    \n",
    "def choose_game(message):\n",
    "    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)\n",
    "    bt1 = types.KeyboardButton('Виселица')\n",
    "    bt2 = types.KeyboardButton('Города')\n",
    "    bt3 = types.KeyboardButton('Шарады')\n",
    "    markup.add(bt1, bt2, bt3)\n",
    "    msg = bot.send_message(message.chat.id, 'Во что хочешь поиграть?',\n",
    "                           reply_markup=markup)\n",
    "    bot.register_next_step_handler(msg, switch_to_game)\n",
    "    \n",
    "def switch_to_game(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)\n",
    "        if message.text == 'Виселица':\n",
    "            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)\n",
    "            bt1 = types.KeyboardButton('Короткое')\n",
    "            bt2 = types.KeyboardButton('Среднее')\n",
    "            bt3 = types.KeyboardButton('Длинное')\n",
    "            markup.add(bt1, bt2, bt3)\n",
    "            msg = bot.send_message(chat_id, f'Выбери длину слова.', reply_markup=markup)\n",
    "            bot.register_next_step_handler(msg, hangman_give_word)\n",
    "        else:\n",
    "            msg = bot.send_message(chat_id, 'Функция находится в разработке...')\n",
    "            bot.register_next_step_handler(msg, switch_to_game)\n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "        \n",
    "def hangman_give_word(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)  \n",
    "        \n",
    "        if message.text == 'Короткое':\n",
    "            word = 'забор'\n",
    "        elif message.text == 'Среднее':\n",
    "            word = 'компьютер'\n",
    "        elif message.text == 'Длинное':\n",
    "            word = 'транспортизация'\n",
    "            \n",
    "        lifes = 6\n",
    "        rec_let = list()\n",
    "        \n",
    "        df.loc[chat_id] = [word, lifes, rec_let]\n",
    "        \n",
    "        bot.send_message(chat_id, 'Попробуй угадать букву ;)')\n",
    "        bot.send_message(chat_id, 'Количество жизней: 6')\n",
    "        msg = bot.send_message(chat_id, '_ ' * len(word))\n",
    "        bot.register_next_step_handler(msg, pred_game)\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "            \n",
    "def pred_game(message):\n",
    "    try:\n",
    "        chat_id = message.chat.id\n",
    "        user_dict[chat_id] = LIST(message.text)\n",
    "        \n",
    "        user_input = message.text.lower()\n",
    "        word = df['word'][chat_id]\n",
    "        \n",
    "        # мб стоит записать в датафрейм\n",
    "        letters_recognized = len(df['rec_let'][chat_id])\n",
    "        \n",
    "        for i in range(len(word)):\n",
    "            if word[i] == user_input:\n",
    "                df['rec_let'][chat_id].append(i)\n",
    "        \n",
    "        if len(df['rec_let'][chat_id]) == letters_recognized:\n",
    "            df['lifes'][chat_id] = df['lifes'][chat_id] - 1\n",
    "            lifes = df['lifes'][chat_id]\n",
    "            if lifes > 0:\n",
    "                bot.send_message(chat_id, 'Неверно! Осталось ' + str(lifes) + ' жизней')\n",
    "                output = ''\n",
    "                for i in range(len(word)):\n",
    "                    if i in df['rec_let'][chat_id]:\n",
    "                        output += word[i] + ' '\n",
    "                    else:\n",
    "                        output += '_ ' \n",
    "                msg = bot.send_message(chat_id, output)\n",
    "                bot.register_next_step_handler(msg, pred_game)\n",
    "            else:\n",
    "                bot.send_message(chat_id, 'Ты проиграл :(')\n",
    "                msg = bot.send_message(chat_id, 'Это было слово \"' + word + '\"')\n",
    "                bot.register_next_step_handler(msg, choose_game)\n",
    "                \n",
    "        else:\n",
    "            if len(df['rec_let'][chat_id]) == len(word):\n",
    "                bot.send_message(chat_id, 'Ты выиграл!')\n",
    "                msg = bot.send_message(chat_id, 'Это было слово \"' + word + '\"')\n",
    "                bot.register_next_step_handler(msg, choose_game)\n",
    "            else:\n",
    "                lifes = df['lifes'][chat_id]\n",
    "                bot.send_message(chat_id, 'Правильно! Осталось ' + str(lifes) + ' жизней')\n",
    "                output = ''\n",
    "                for i in range(len(word)):\n",
    "                    if i in df['rec_let'][chat_id]:\n",
    "                        output += word[i] + ' '\n",
    "                    else:\n",
    "                        output += '_ ' \n",
    "                msg = bot.send_message(chat_id, output)\n",
    "                bot.register_next_step_handler(msg, pred_game)         \n",
    "        \n",
    "        df.to_csv('test.csv')\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "            \n",
    "bot.polling(none_stop=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
